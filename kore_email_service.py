import os
import smtplib
import json
import requests
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from dotenv import load_dotenv
from typing import Optional, Dict, Any

load_dotenv()

class KoreEmailService:
    def __init__(self):
        self.smtp_server = os.getenv("SMTP_SERVER", "smtp.gmail.com")
        self.smtp_port = int(os.getenv("SMTP_PORT", "587"))
        self.sender_email = os.getenv("SENDER_EMAIL")
        self.sender_password = os.getenv("SENDER_PASSWORD")
        self.recipient_email = os.getenv("RECIPIENT_EMAIL")
        self.kore_webhook_url = os.getenv("KORE_AI_WEBHOOK_URL")
        self.kore_authorization = os.getenv("KORE_AUTHORIZATION")
        
        if not all([self.sender_email, self.sender_password, self.recipient_email]):
            raise ValueError("Missing required email configuration. Check SENDER_EMAIL, SENDER_PASSWORD, and RECIPIENT_EMAIL environment variables.")
    
    def send_email_via_smtp(self, subject: str, content: str, recipient: Optional[str] = None) -> Dict[str, Any]:
        """
        Send email using SMTP (Gmail)
        """
        to_email = recipient or self.recipient_email
        
        try:
            # Create message
            msg = MIMEMultipart()
            msg['From'] = self.sender_email
            msg['To'] = to_email
            msg['Subject'] = subject
            
            # Add body to email
            msg.attach(MIMEText(content, 'plain'))
            
            # Create SMTP session
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()  # Enable security
            server.login(self.sender_email, self.sender_password)
            
            # Send email
            text = msg.as_string()
            server.sendmail(self.sender_email, to_email, text)
            server.quit()
            
            return {
                "success": True,
                "status_code": 200,
                "response": "Email sent successfully via SMTP"
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    def send_email_via_kore_webhook(self, subject: str, content: str, recipient: Optional[str] = None) -> Dict[str, Any]:
        """
        Send email through Kore.ai webhook that triggers SMTP
        """
        if not self.kore_webhook_url:
            return self.send_email_via_smtp(subject, content, recipient)
        
        to_email = recipient or self.recipient_email
        
        payload = {
            "action": "send_email",
            "email_data": {
                "to": to_email,
                "subject": subject,
                "content": content,
                "from": self.sender_email
            }
        }
        
        headers = {
            "Content-Type": "application/json"
        }
        
        if self.kore_authorization:
            headers["Authorization"] = self.kore_authorization
        
        try:
            response = requests.post(self.kore_webhook_url, headers=headers, json=payload)
            return {
                "success": response.status_code in [200, 202],
                "status_code": response.status_code,
                "response": response.text
            }
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    def send_sentiment_alert(self, tweet_text: str, sentiment_label: str, sentiment_score: float, recipient: Optional[str] = None) -> Dict[str, Any]:
        """
        Send sentiment alert email with formatted content
        """
        subject = f"ðŸš¨ Negative Sentiment Alert - {sentiment_label.title()}"
        
        content = f"""
TWITTER SENTIMENT ALERT

Sentiment: {sentiment_label.upper()} (Confidence: {sentiment_score:.2%})
Tweet: {tweet_text}

Timestamp: {self._get_current_timestamp()}

This alert was generated by your Twitter Sentiment Analysis system.
        """.strip()
        
        # Try Kore.ai webhook first, fallback to direct SMTP
        result = self.send_email_via_kore_webhook(subject, content, recipient)
        
        if not result.get("success"):
            print(f"[Email] Kore.ai webhook failed, trying direct SMTP: {result.get('error', 'Unknown error')}")
            result = self.send_email_via_smtp(subject, content, recipient)
        
        return result
    
    def _get_current_timestamp(self) -> str:
        """Get current timestamp in readable format"""
        from datetime import datetime
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")

# Convenience function for easy import
def send_sentiment_alert(tweet_text: str, sentiment_label: str, sentiment_score: float, recipient: Optional[str] = None) -> Dict[str, Any]:
    """
    Convenience function to send sentiment alert
    """
    email_service = KoreEmailService()
    return email_service.send_sentiment_alert(tweet_text, sentiment_label, sentiment_score, recipient)